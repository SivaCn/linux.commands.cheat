Shortcut - Bash

    Ctrl+U – Clear to the beginning of the line (quicker then pressing backspace repeatedly)
    Ctrl+K – Clear to the end of the line
    Ctrl+W – Delete the previous word
    Ctrl+L – Clear the screen
    Ctrl+A – Go to the start of the line
    Ctrl+E – Go to the end of the line
    Ctrl+C – send sigint to the current process
    Ctrl+D – send eof to the current process (useful you logging out of bash and other interactive shells)
    Ctrl+Z – send sigtstp to the current process causing it to suspend (type fg to start it again – more on this in the Jobs section)

Shortcut - Terminal:

    Ctrl+Shift+C – copy
    Ctrl+Shift+V – paste
    Ctrl+Shift+T – new tab
    Ctrl+Shift+M – hide/show the menu bar (a kde thing)
    Shift+Left Arrow – go to next tab (probably konsole only)
    Shift+Right Arrow – go to previous tab
    Ctrl+Shift+Arrow – Move tab left/right

Display a cool clock on your terminal

    watch -t -n1 "date +%T|figlet"
    This command displays a clock on your terminal which updates the time every second. Press Ctrl-C to exit.
    
    A couple of variants:
    
    A little bit bigger text:
    
    watch -t -n1 "date +%T|figlet -f big"You can try other figlet fonts, too.
    
    Big sideways characters:
    
    watch -n 1 -t '/usr/games/banner -w 30 $(date +%M:%S)'This requires a particular version
    of banner and a 40-line terminal or you can adjust the width (“30″ here).

intercept stdout/stderr of another process
    strace -ff -e trace=write -e write=1,2 -p SOME_PID
    
Remove duplicate entries in a file without sorting.
    awk '!x[$0]++' <file>
    Using awk, find duplicates in a file without sorting, which reorders the contents.
    awk will not reorder them, and still find and remove duplicates which you can then
    redirect into another file.

Record a screencast and convert it to an mpeg
    ffmpeg -f x11grab -r 25 -s 800x600 -i :0.0 /tmp/outputFile.mpg
    Grab X11 input and create an MPEG at 25 fps with the resolution 800×600

Mount a .iso file in UNIX/Linux
    mount /path/to/file.iso /mnt/cdrom -oloop
    “-o loop” lets you use a file as a block device

Insert the last command without the last argument (bash)
    !:-
    /usr/sbin/ab2 -f TLS1 -S -n 1000 -c 100 -t 2 http://www.google.com/then

    !:- http://www.urfix.com/is the same as
    
    /usr/sbin/ab2 -f TLS1 -S -n 1000 -c 100 -t 2 http://www.urfix.com/
    
Convert seconds to human-readable format

    date -d@1234567890
    This example, for example, produces the output, “Fri Feb 13 15:26:30 EST 2009″

Job Control
    ^Z $bg $disown
    You’re running a script, command, whatever.. You don’t expect it to take long, now 5pm has rolled around and you’re ready to go home… Wait, it’s still running… You forgot to nohup it before running it… Suspend it, send it to the background, then disown it… The ouput wont go anywhere, but at least the command will still run…

Edit a file on a remote host using vim
    vim scp://username@host//path/to/somefile
    
Monitor the queries being run by MySQL
    watch -n 1 mysqladmin --user=<user> --password=<password> processlist
    Watch is a very useful command for periodically running another command – in
    this using mysqladmin to display the processlist. This is useful for monitoring
    which queries are causing your server to clog up.

escape any command aliases
    \[command]
    e.g. if rm is aliased for ‘rm -i’, you can escape the alias by prepending a backslash:

    rm [file] # WILL prompt for confirmation per the alias
    
    \rm [file] # will NOT prompt for confirmation per the default behavior of the command

Show apps that use internet connection at the moment. (Multi-Language)
    ss -p
    for one line per process:
    
    ss -p | catfor established sockets only:
    
    ss -p | grep STAfor just process names:
    
    ss -p | cut -f2 -sd\"or
    
    ss -p | grep STA | cut -f2 -d\"
    
Send pop-up notifications on Gnome

    notify-send ["<title>"] "<body>"
    The title is optional.
    
    Options:
    
    -t: expire time in milliseconds.
    
    -u: urgency (low, normal, critical).
    
    -i: icon path.
    
    On Debian-based systems you may need to install the ‘libnotify-bin’ package.
    
    Useful to advise when a wget download or a simulation ends. Example:
    
    wget URL ; notify-send "Done"
    
quickly rename a file

    mv filename.{old,new}
    
Remove all but one specific file
    rm -f !(survivior.txt)
    
Generate a random password 30 characters long
    strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 30 | tr -d '\n'; echo
    Find random strings within /dev/urandom. Using grep filter to just Alphanumeric
    characters, and then print the first 30 and remove all the line feeds.

Run a command only when load average is below a certain threshold
    echo "rm -rf /unwanted-but-large/folder" | batch
    Good for one off jobs that you want to run at a quiet time. The default
    threshold is a load average of 0.8 but this can be set using atrun.

Binary Clock
    watch -n 1 'echo "obase=2;`date +%s`" | bc'

Processor / memory bandwidthd? in GB/s
    dd if=/dev/zero of=/dev/null bs=1M count=32768
    Read 32GB zero’s and throw them away.

Backup all MySQL Databases to individual files
    for I in $(mysql -e 'show databases' -s --skip-column-names); 
    do mysqldump $I | gzp > "$I.sql.gz"; done

# Create a Directory and cd to it
$ function mkdcd () { mkdir "$1" && cd "$1" }
$ echo 'mkcd() { mkdir -p "$@" && cd "$_"; }' >> ~/.bashrc
$ mkdir /home/foo/doc/bar && cd $_
$ md () { mkdir -p "$@" && cd "$@"; }

# Renaming files removing some unwanted extension
$ for i in *ext; do mv $i ${i%.ext}; done

# Echo PID of the current running command
$ command & echo $!

# expand a program-name into an absolute path on the bash command-line, using ctrl-e
$ bind '"\C-e":"\eb `which \ef`\e\C-e"'
    # Limitations:
    # as written above, only works for programs with no file extention (i.e 'proggy', but not 'proggy.sh')
    # because \eb maps to readine function backward-word rather then shell-backward-word (which
    # is unbinded by default on ubuntu), and correspondingly for \ef.
    # if you're willing to have Ctrl-f and Ctrl-g taken up too , you can insert the following lines
    # into ~/.inputrc, in which case invoking Ctrl-e will do the right thing both for "proggy" and "proggy.sh".
    # -- cut here --
    # \C-f:shell-backward-word
    # \C-g:shell-forward-word
    # "\C-e":"\C-f`which \C-g`\e\C-e"
    # -- cut here --

# Pass TAB as field separator to sort, join, cut, etc.
$ sort -t $'\t' -k 2 input.txt
    # Use this BASH trick to create a variable containing the TAB character and pass it as the 
    # argument to sort, join, cut and other commands which don't understand the \t notation.
    # sort -t $'\t' ... join -t $'\t' ... cut -d $'\t' ...

# Insert the last argument of the previous command
$ !$
    # for example if you did a:
    # ls -la /bin/ls
    # then
    # ls !$
    # is equivalent to doing a
    # ls /bin/ls

# download file1 file2 file3 file4 .... file 100
$ for file in $(seq -f '%03.f' 1 $TOTAL ); do echo "($file/$TOTAL)"; curl -f -O http://domain.com/Name_$file.ext; done

# download file1 file2 file3 file4 .... file 100
$ wget http://domain.com/file{1..100}

# Write and run a quick C program
$ cat | gcc -x c -o a.out - && ./a.out && rm a.out

# Search back through previous commands
$ Ctrl-R <search-text>

# Go to parent directory of filename edited in last command
$ cd `dirname $_`

# Go to parent directory of filename edited in last command
$ cd !$:h
    # Use $!:t for the filename alone, without the dirname.

# Count to 65535 in binary (for no apparent reason)
$ a=`printf "%*s" 16`;b=${a//?/{0..1\}}; echo `eval "echo $b"`

# For a $FILE, extracts the path, filename, filename without extension and extension.
$ FILENAME=${FILE##*/};FILEPATH=${FILE%/*};NOEXT=${FILENAME%\.*};EXT=${FILE##*.}

# To implement a for loop:
for file in `ls .`;
do 
    echo $file found;
done

# In-Line for loop
$ for n in def; do grep -i $n <file>; done

# To implement a case command:
case "$1"
in
    0) echo "zero found";;
    1) echo "one found";;
    2) echo "two found";;
    3*) echo "something beginning with 3 found";;
esac

$ echo {one,two,red,blue}
one two red blue

$ echo {one,two,red,blue}fish
onefish twofish redfish bluefish

$ echo fish{one,two,red,blue}
fishone fishtwo fishred fishblue

$ echo fi{one,two,red,blue}sh
fionesh fitwosh firedsh fibluesh

$ echo {one, two, red, blue }fish
{one, two, red, blue }fish

$ echo "{one,two,red,blue} fish"
{one,two,red,blue} fish

$ echo {"one ","two ","red ","blue "}fish
one fish two fish red fish blue fish

$ echo {one,two,red,blue}" fish"
one fish two fish red fish blue fish

$ echo {{1,2,3},1,2,3}
1 2 3 1 2 3

$ echo {{1,2,3}1,2,3}
11 21 31 2 3

$ cp /etc/httpd/conf/httpd.conf{,.bak}
    Notice that there is no character between the opening brace and the first comma.
    It's perfectly acceptable to do this and is useful when adding characters to an existing
    filename or when one argument is a substring of the other. Then, if I need to see what
    changes I made later in the day, I use the diff command and reverse the order of the
    strings inside the braces:

$ date +%d-%b-%Y
12-Mar-2004

$ today=$(date +%d-%b-%Y)

$ echo $today
12-Mar-2004

$ rpm -ql $(rpm -qa | grep httpd)
